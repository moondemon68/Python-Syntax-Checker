if else elif while for in range import as from module rename def class return condition openparentheses closeparentheses colon newline variable number false true or is break continue pass none exception arithmeticop logicalop equal comma
S ALGORITHM IF_STATEMENT ELIF_STATEMENT ELSE_STATEMENT WHILE_STATEMENT FOR_STATEMENT FOR_RANGE IMPORT DEF CLASS RETURN FALSE TRUE OR IS SINGLE_PARAMETER MULTI_PARAMETER EXPRESSION BREAK CONTINUE PASS EXCEPTION CLOSE_EXPRESSION ARITHMETIC_EXPRESSION CONDITIONAL LOGICAL_EXPRESSION
S -> ALGORITHM
ALGORITHM -> newline
ALGORITHM -> ALGORITHM ALGORITHM
ALGORITHM -> variable equal EXPRESSION
# IF ELIF ELSE
ALGORITHM -> IF_STATEMENT
IF_STATEMENT -> if openparentheses LOGICAL_EXPRESSION closeparentheses colon newline ALGORITHM | if LOGICAL_EXPRESSION colon newline ALGORITHM | IF_STATEMENT ELIF_STATEMENT | IF_STATEMENT ELIF_STATEMENT ELSE_STATEMENT | IF_STATEMENT ELSE_STATEMENT
ELIF_STATEMENT -> ELIF_STATEMENT ELIF_STATEMENT | elif openparentheses LOGICAL_EXPRESSION closeparentheses colon newline ALGORITHM | elif LOGICAL_EXPRESSION colon newline ALGORITHM
ELSE_STATEMENT -> else colon newline ALGORITHM
EXPRESSION -> true | false | variable | number | openparentheses CLOSE_EXPRESSION | EXPRESSION ARITHMETIC_EXPRESSION
ARITHMETIC_EXPRESSION -> arithmeticop EXPRESSION
CLOSE_EXPRESSION -> EXPRESSION closeparentheses
LOGICAL_EXPRESSION -> EXPRESSION logicalop EXPRESSION | true | false
# FOR
ALGORITHM -> FOR_STATEMENT
FOR_STATEMENT -> for variable in range openparentheses FOR_RANGE closeparentheses colon newline ALGORITHM
FOR_RANGE -> number | number comma number | number comma number comma number
# WHILE
ALGORITHM -> WHILE_STATEMENT
WHILE_STATEMENT -> while openparentheses LOGICAL_EXPRESSION closeparentheses colon newline ALGORITHM